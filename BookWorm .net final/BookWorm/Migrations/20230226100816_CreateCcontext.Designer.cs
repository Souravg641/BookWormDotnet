// <auto-generated />
using System;
using BookWorm.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookWorm.Migrations
{
    [DbContext(typeof(Ccontext))]
    [Migration("20230226100816_CreateCcontext")]
    partial class CreateCcontext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeneficiaryMasterRoyaltyCalculation", b =>
                {
                    b.Property<int>("BeneficiaryMastersBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int>("RoyaltyCalculationsRoyaltyCalculationId")
                        .HasColumnType("int");

                    b.HasKey("BeneficiaryMastersBeneficiaryId", "RoyaltyCalculationsRoyaltyCalculationId");

                    b.HasIndex("RoyaltyCalculationsRoyaltyCalculationId");

                    b.ToTable("BeneficiaryMasterRoyaltyCalculation");
                });

            modelBuilder.Entity("BookWorm.Models.AttributeMaster", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"));

                    b.Property<string>("AttributeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeId");

                    b.ToTable("AttributesMasters");
                });

            modelBuilder.Entity("BookWorm.Models.Authentication", b =>
                {
                    b.Property<int>("AuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthenticationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthenticationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Authentications");
                });

            modelBuilder.Entity("BookWorm.Models.BeneficiaryMaster", b =>
                {
                    b.Property<int>("BeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeneficiaryId"));

                    b.Property<long>("BeneficiaryAccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryAccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryBankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryBankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BeneficiaryEmailId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryIFSC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryPAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryId");

                    b.ToTable("BeneficiaryMasters");
                });

            modelBuilder.Entity("BookWorm.Models.CustomerMaster", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerMasters");
                });

            modelBuilder.Entity("BookWorm.Models.GenreMaster", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("GenreId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GenreMasters");
                });

            modelBuilder.Entity("BookWorm.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("InvoiceAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BookWorm.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<float>("BasePrice")
                        .HasColumnType("real");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RentNumberOfDays")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("BookWorm.Models.LanguageMaster", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("LanguageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId");

                    b.HasIndex("TypeId");

                    b.ToTable("LanguageMasters");
                });

            modelBuilder.Entity("BookWorm.Models.MyShelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProductExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShelfId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("MyShelfs");
                });

            modelBuilder.Entity("BookWorm.Models.ProductAttribute", b =>
                {
                    b.Property<int>("ProductAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductAttributeId"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValue")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductAttributeId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("BookWorm.Models.ProductBeneficiaryMaster", b =>
                {
                    b.Property<int>("ProductBeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductBeneficiaryId"));

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<float>("ProductBeneficiaryPercentage")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductBeneficiaryId");

                    b.HasIndex("BeneficiaryId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBeneficiaryMasters");
                });

            modelBuilder.Entity("BookWorm.Models.ProductMaster", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLibrary")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRentable")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MinRentDays")
                        .HasColumnType("int");

                    b.Property<string>("ProductAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ProductBasePrice")
                        .HasColumnType("real");

                    b.Property<string>("ProductDescriptionLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescriptionShort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ProductOfferPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("ProductOfferPriceExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("ProductSellingPriceCost")
                        .HasColumnType("real");

                    b.Property<float?>("RentPerDay")
                        .HasColumnType("real");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TypeId");

                    b.ToTable("ProductMasters");
                });

            modelBuilder.Entity("BookWorm.Models.ProductTypeMaster", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("ProductTypeMasters");
                });

            modelBuilder.Entity("BookWorm.Models.RoyaltyCalculation", b =>
                {
                    b.Property<int>("RoyaltyCalculationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoyaltyCalculationId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoyaltyCalculationTransactiondate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("RoyaltyCalculationId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("RoyaltyCalculations");
                });

            modelBuilder.Entity("MyShelfProductMaster", b =>
                {
                    b.Property<int>("MyShelvesShelfId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMasterProductId")
                        .HasColumnType("int");

                    b.HasKey("MyShelvesShelfId", "ProductMasterProductId");

                    b.HasIndex("ProductMasterProductId");

                    b.ToTable("MyShelfProductMaster");
                });

            modelBuilder.Entity("BeneficiaryMasterRoyaltyCalculation", b =>
                {
                    b.HasOne("BookWorm.Models.BeneficiaryMaster", null)
                        .WithMany()
                        .HasForeignKey("BeneficiaryMastersBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.RoyaltyCalculation", null)
                        .WithMany()
                        .HasForeignKey("RoyaltyCalculationsRoyaltyCalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookWorm.Models.Authentication", b =>
                {
                    b.HasOne("BookWorm.Models.CustomerMaster", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookWorm.Models.GenreMaster", b =>
                {
                    b.HasOne("BookWorm.Models.LanguageMaster", "LanguageMaster")
                        .WithMany("GenreMasters")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageMaster");
                });

            modelBuilder.Entity("BookWorm.Models.Invoice", b =>
                {
                    b.HasOne("BookWorm.Models.CustomerMaster", "Customer")
                        .WithOne("Invoice")
                        .HasForeignKey("BookWorm.Models.Invoice", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookWorm.Models.InvoiceDetail", b =>
                {
                    b.HasOne("BookWorm.Models.Invoice", "Invoice")
                        .WithOne("InvoiceDetail")
                        .HasForeignKey("BookWorm.Models.InvoiceDetail", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.ProductMaster", "ProductMaster")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("BookWorm.Models.LanguageMaster", b =>
                {
                    b.HasOne("BookWorm.Models.ProductTypeMaster", "ProductTypeMaster")
                        .WithMany("LanguageMaster")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductTypeMaster");
                });

            modelBuilder.Entity("BookWorm.Models.MyShelf", b =>
                {
                    b.HasOne("BookWorm.Models.CustomerMaster", "Customer")
                        .WithOne("MyShelf")
                        .HasForeignKey("BookWorm.Models.MyShelf", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookWorm.Models.ProductAttribute", b =>
                {
                    b.HasOne("BookWorm.Models.AttributeMaster", "AttributeMaster")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.ProductMaster", "ProductMaster")
                        .WithMany("ProductAttribute")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeMaster");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("BookWorm.Models.ProductBeneficiaryMaster", b =>
                {
                    b.HasOne("BookWorm.Models.BeneficiaryMaster", "Beneficiary")
                        .WithOne("ProductBeneficiaryMaster")
                        .HasForeignKey("BookWorm.Models.ProductBeneficiaryMaster", "BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.ProductMaster", "ProductMaster")
                        .WithMany("ProductBeneficiaries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("BookWorm.Models.ProductMaster", b =>
                {
                    b.HasOne("BookWorm.Models.GenreMaster", "GenreMaster")
                        .WithMany("ProductMasters")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.LanguageMaster", "LanguageMaster")
                        .WithMany("ProductMasters")
                        .HasForeignKey("LanguageId");

                    b.HasOne("BookWorm.Models.ProductTypeMaster", "ProductTypeMaster")
                        .WithMany("ProductMasters")
                        .HasForeignKey("TypeId");

                    b.Navigation("GenreMaster");

                    b.Navigation("LanguageMaster");

                    b.Navigation("ProductTypeMaster");
                });

            modelBuilder.Entity("BookWorm.Models.RoyaltyCalculation", b =>
                {
                    b.HasOne("BookWorm.Models.Invoice", "Invoice")
                        .WithOne("RoyaltyCalculation")
                        .HasForeignKey("BookWorm.Models.RoyaltyCalculation", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.ProductMaster", "Product")
                        .WithOne("RoyaltyCalculation")
                        .HasForeignKey("BookWorm.Models.RoyaltyCalculation", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyShelfProductMaster", b =>
                {
                    b.HasOne("BookWorm.Models.MyShelf", null)
                        .WithMany()
                        .HasForeignKey("MyShelvesShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Models.ProductMaster", null)
                        .WithMany()
                        .HasForeignKey("ProductMasterProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookWorm.Models.AttributeMaster", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("BookWorm.Models.BeneficiaryMaster", b =>
                {
                    b.Navigation("ProductBeneficiaryMaster");
                });

            modelBuilder.Entity("BookWorm.Models.CustomerMaster", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("MyShelf");
                });

            modelBuilder.Entity("BookWorm.Models.GenreMaster", b =>
                {
                    b.Navigation("ProductMasters");
                });

            modelBuilder.Entity("BookWorm.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetail");

                    b.Navigation("RoyaltyCalculation");
                });

            modelBuilder.Entity("BookWorm.Models.LanguageMaster", b =>
                {
                    b.Navigation("GenreMasters");

                    b.Navigation("ProductMasters");
                });

            modelBuilder.Entity("BookWorm.Models.ProductMaster", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("ProductAttribute");

                    b.Navigation("ProductBeneficiaries");

                    b.Navigation("RoyaltyCalculation");
                });

            modelBuilder.Entity("BookWorm.Models.ProductTypeMaster", b =>
                {
                    b.Navigation("LanguageMaster");

                    b.Navigation("ProductMasters");
                });
#pragma warning restore 612, 618
        }
    }
}
